@using Microsoft.AspNetCore.Components
@namespace NCloud.Views.Shared.Components
@inject IJSRuntime jsRuntime
@inject ICloudService service

<div class="d-flex justify-content-end mb-2 bg-secondary w-100 rounded">
    <div class="btn-group">
        <a @onclick="SaveClicked" class="btn btn-success">Save</a>
    </div>
</div>
<div class=" border border-dark border-3 w-100 h-100 rounded">
    <StandaloneCodeEditor @ref="editor" Id="code_editor" CssClass="my-editor-class" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" />
</div>

@code {
    [Parameter]
    public string? FilePath { get; set; } // should be specified when calling


    private StandaloneCodeEditor editor = null!;
    private string valueToSet = String.Empty;
    private const string THEME = "vs-dark";

    public async Task SaveClicked()
    {
        string fileData = await editor.GetValue();
        System.IO.File.WriteAllText(FilePath!, fileData);
    }

    protected override async Task OnInitializedAsync()
    {
        if (FilePath is not null && FilePath != String.Empty)
        {
            valueToSet = String.Join("\n", System.IO.File.ReadAllLines(FilePath!));
            await Task.Delay(0); // for async
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "javascript",
                GlyphMargin = true,
                Value = valueToSet,
                Theme = THEME,
                LargeFileOptimizations = true,
                WordBasedSuggestions = true,
                DetectIndentation = true,
                SelectOnLineNumbers = true,
                RenderFinalNewline = true,
                TabSize = 4
            };
    }

    private async Task EditorOnDidInit()
    {
        await editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
        {
            Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        decorationIds = await editor.DeltaDecorations(null, newDecorations);
        // You can now use 'decorationIds' to change or remove the decorations
    }

    private string[] decorationIds = new string[0];

    private void OnContextMenu(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        Console.WriteLine($"setting theme to: {e.Value?.ToString()}");
        await BlazorMonaco.Editor.Global.SetTheme(jsRuntime, e.Value?.ToString());
    }

    private async Task SetValue()
    {
        Console.WriteLine($"setting value to: {valueToSet}");
        await editor.SetValue(valueToSet);
    }

    private async Task GetValue()
    {
        var val = await editor.GetValue();
        Console.WriteLine($"value is: {val}");
    }

    private async Task AddCommand()
    {
        await editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.Enter, (args) =>
        {
            Console.WriteLine("Ctrl+Enter : Editor command is triggered.");
        });
    }

    private async Task AddAction()
    {
        var actionDescriptor = new ActionDescriptor
            {
                Id = "testAction",
                Label = "Test Action",
                Keybindings = new int[] { (int)KeyMod.CtrlCmd | (int)KeyCode.KeyB },
                ContextMenuGroupId = "navigation",
                ContextMenuOrder = 1.5f,
                Run = (editor) =>
                {
                    Console.WriteLine("Ctrl+B : Editor action is triggered.");
                }
            };
        await editor.AddAction(actionDescriptor);
    }

    private async Task RegisterCodeActionProvider()
    {
        // Set sample marker
        var model = await editor.GetModel();
        var markers = new List<MarkerData>
        {
            new MarkerData
            {
                CodeAsObject = new MarkerCode
                {
                    TargetUri = "https://www.google.com",
                    Value = "my-value"
                },
                Message = "Marker example",
                Severity = MarkerSeverity.Warning,
                StartLineNumber = 4,
                StartColumn = 3,
                EndLineNumber = 4,
                EndColumn = 7
            }
        };
        await BlazorMonaco.Editor.Global.SetModelMarkers(jsRuntime, model, "default", markers);

        // Register quick fix for marker
        await BlazorMonaco.Languages.Global.RegisterCodeActionProvider(jsRuntime, "javascript", (modelUri, range, context) =>
        {
            var codeActionList = new CodeActionList();
            if (context.Markers.Count == 0)
                return codeActionList;

            codeActionList.Actions = new List<CodeAction>
                            {
                new CodeAction
                {
                    Title = "Fix example",
                    Kind = "quickfix",
                    Diagnostics = markers,
                    Edit = new WorkspaceEdit
                    {
                        Edits = new List<IWorkspaceEdit>
                        {
                            new WorkspaceTextEdit
                            {
                                ResourceUri = modelUri,
                                TextEdit = new TextEditWithInsertAsSnippet
                                {
                                    Range = range,
                                    Text = "THIS"
                                }
                            }
                        }
                    },
                    IsPreferred = true
                }
                            };
            return codeActionList;
        });
    }

    private async Task RegisterCompletionItemProvider()
    {
        // Register completion item to replace warning item
        await BlazorMonaco.Languages.Global.RegisterCompletionItemProvider(jsRuntime, "javascript", (modelUri, position, context) =>
        {
            var completionList = new CompletionList()
                {
                    Suggestions = new List<CompletionItem>
                                {
                    new CompletionItem
                    {
                        LabelAsString = "Replace by THIS",
                        Kind = CompletionItemKind.Variable,
                        Detail = "this -> THIS",
                        InsertText = "THIS",
                        Preselect = true,
                        RangeAsObject = new BlazorMonaco.Range
                        {
                            StartLineNumber = 4,
                            StartColumn = 3,
                            EndLineNumber = 4,
                            EndColumn = 7
                        }
                    }
                                }
                };
            return completionList;
        });
    }
}
