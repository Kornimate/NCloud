@using Newtonsoft.Json;
@{
    List<CloudNotificationAbstarct>? queue = null;
    if (TempData["Notification"] is not null)
    {
        queue = JsonConvert.DeserializeObject<List<CloudNotificationAbstarct>>((string)TempData["Notification"]!);
    }
}

@if (queue is not null)
{
    <div class="toast-container fixed-notifications p-3">
        @foreach(CloudNotificationAbstarct notification in queue)
        {
            <div class="toast @(notification.Color)" id="notification_multiple" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
                <div class="toast-header @(notification.Color)">
                    <img src="@notification.Image" class="rounded me-2">
                    <strong class="me-auto text-dark">@notification.Title</strong>
                    <small class="text-bold text-dark">just now</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    @notification.Text !
                </div>
            </div>
        }
    </div>
    <script type="text/javascript">

        function ShowNotifications(dilation) {
            const toasts = document.querySelectorAll("#notification_multiple");
            for (let i = 0; i < toasts.length; i++) {
                setTimeout(() => {
                    let toast = new bootstrap.Toast(toasts[i]);
                    toast.show();
                }, i * dilation);
            }
        }

        ShowNotifications(300);
    </script>
}
