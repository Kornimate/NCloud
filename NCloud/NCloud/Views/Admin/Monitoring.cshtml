@model MonitorViewModel

@{
    ViewData["title"] = "Database Metrics";
}

<div class="d-flex justify-content-between w-100 bg-primary rounded mb-3">
    <a asp-action="Index" asp-controller="Admin" class="btn btn-primary"><img src="~/utilities/arrow-left-circle.svg" width=" 20" height="20" class="rounded align-middle" /></a>
    <span class="btn"><img src="~/utilities/metrics.svg" width=" 20" height="20" class="rounded align-middle" /></span>
</div>

<script src="/lib/d3/d3.v7.min.js"></script>

<div class="d-flex w-100 justify-content-center mt-4">
    <div id="my_dataviz"></div>
</div>

@section Scripts {
    <script type="text/javascript">

        // Create 2 datasets
        var data1 = @Html.Raw(Json.Serialize(Model.LineGraphPoints));

        console.log(data1)

        const mapperFunction = (d) => {
            return { x : d3.timeParse("%Y-%m-%d")(d.x), y : d.y }
        }

        data1 = data1.map(mapperFunction)

        console.log(data1);

        // set the dimensions and margins of the graph
        var margin = { top: 10, right: 30, bottom: 30, left: 50 },
            width = 700 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select("#my_dataviz")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .attr("fill", "#cce5df")
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        // Initialise a X axis:
        var x = d3.scaleTime()
            .domain(d3.extent(data1, function(d) { return d.x; }))
            .range([ 0, width ]);

        var xAxis = d3.axisBottom().scale(x);

        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .attr("class", "myXaxis")
            .call(d3.axisBottom(x));
                

        // Initialize an Y axis
        var y = d3.scaleLinear().range([height, 0]);
        var yAxis = d3.axisLeft().scale(y);
        svg.append("g")
            .attr("class", "myYaxis")

        // Create a function that takes a dataset as input and update the plot:
        function update(data) {

            // Create the X axis:
            x.domain([0, d3.max(data, function (d) { return d.x })]);
            svg.selectAll(".myXaxis").transition()
                .duration(1000)
                .call(xAxis);

            // create the Y axis
            y.domain([0, d3.max(data, function (d) { return d.y })]);
            svg.selectAll(".myYaxis")
                .transition()
                .duration(1000)
                .call(yAxis);

            // Create a update selection: bind to the new data
            var u = svg.selectAll(".lineTest")
                .data([data], function (d) { return d.x });

            // Updata the line
            u
                .enter()
                .append("path")
                .attr("class", "lineTest")
                .merge(u)
                .transition()
                .duration(1000)
                .attr("d", d3.area()
                    .x(function(d) { return x(d.x) })
                    .y0(y(0))
                    .y1(function(d) { return y(d.y) }))
                .attr("fill", "#0d6efd")
                .attr("stroke", "#0d6efd")
                .attr("stroke-width", 2.5)
        }

        // At the beginning, I run the update function on the first dataset:
        update(data1)

    </script>
}